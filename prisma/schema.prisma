// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODELS ---

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collections   Collection[]
  emailVerified Boolean      @default(false)
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Book {
  id        String   @id // Gutenberg book ID
  title     String
  author    String?
  cover     String?
  category  String?
  createdAt DateTime @default(now())

  collections Collection[]
}

model Collection {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  progress   Float     @default(0)
  status     String    @default("reading") // reading | completed | paused
  lastPage   Int? // track the last page read
  totalPages Int? // optional, if available
  startedAt  DateTime?
  finishedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
